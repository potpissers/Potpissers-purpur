From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Cameron <cuckmeron@gmail.com>
Date: Thu, 20 Jun 2024 12:43:17 -0400
Subject: [PATCH] Cubecore


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index d9fbc5c1f4c6317165d8daa104d3d0896b52c240..5bf399bffd583f5ff859001f04ee239262e16b3e 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -201,6 +201,7 @@ import org.bukkit.inventory.MainHand;
 
 public class ServerPlayer extends net.minecraft.world.entity.player.Player implements ca.spottedleaf.moonrise.patches.chunk_system.player.ChunkSystemServerPlayer { // Paper - rewrite chunk system
 
+    public boolean pvpVelocityBypass = false;
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final int NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_XZ = 32;
     private static final int NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_Y = 10;
@@ -769,6 +770,7 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
 
     @Override
     public void tick() {
+        if (this.pvpVelocityBypass && this.onGround()) this.pvpVelocityBypass = false;
         // CraftBukkit start
         if (this.joining) {
             this.joining = false;
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 392381dde4e188cdf2c75bcf2109158d6cf0f330..5967ab7b66d38a907a0c2ee88384476caea3c1cd 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -75,6 +75,7 @@ import net.minecraft.world.InteractionHand;
 import net.minecraft.world.damagesource.CombatRules;
 import net.minecraft.world.damagesource.CombatTracker;
 import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.damagesource.DamageType;
 import net.minecraft.world.damagesource.DamageTypes;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectInstance;
@@ -132,6 +133,7 @@ import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Scoreboard;
+import org.bukkit.Material;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -160,7 +162,9 @@ import org.bukkit.event.player.PlayerItemConsumeEvent;
 import co.aikar.timings.MinecraftTimings; // Paper
 
 public abstract class LivingEntity extends Entity implements Attackable {
-
+    HashSet<ResourceKey<DamageType>> knockbackDamageTypes = new HashSet<>(List.of(DamageTypes.MOB_PROJECTILE, DamageTypes.WIND_CHARGE, DamageTypes.ARROW, DamageTypes.EXPLOSION, DamageTypes.FIREBALL, DamageTypes.FIREWORKS, DamageTypes.MAGIC, DamageTypes.MOB_ATTACK, DamageTypes.PLAYER_ATTACK, DamageTypes.TRIDENT));
+    HashSet<Material> netheriteArmorSet = new HashSet<>(List.of(Material.NETHERITE_HELMET, Material.NETHERITE_CHESTPLATE, Material.NETHERITE_LEGGINGS, Material.NETHERITE_BOOTS));
+    HashSet<Material> netheriteWeapons = new HashSet<>(List.of(Material.NETHERITE_SWORD, Material.NETHERITE_AXE, Material.MACE, Material.TRIDENT));
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final String TAG_ACTIVE_EFFECTS = "active_effects";
     private static final ResourceLocation SPEED_MODIFIER_POWDER_SNOW_ID = ResourceLocation.withDefaultNamespace("powder_snow");
@@ -1523,7 +1527,8 @@ public abstract class LivingEntity extends Entity implements Attackable {
                 }
                 // CraftBukkit end
                 this.lastHurt = amount;
-                flag1 = false;
+                if (this.lastDamageSource != null && (this.lastDamageSource.is(DamageTypes.PLAYER_ATTACK) || this.lastDamageSource.is(DamageTypes.ARROW) || this.lastDamageSource.is(DamageTypes.TRIDENT)))
+                    flag1 = false;
             } else {
                 // CraftBukkit start
                 if (!this.actuallyHurt(source, amount)) {
@@ -1598,6 +1603,8 @@ public abstract class LivingEntity extends Entity implements Attackable {
                         d1 = source.getSourcePosition().z() - this.getZ();
                     }
 
+                    if (this instanceof ServerPlayer sp && source.getEntity() instanceof ServerPlayer)
+                        sp.pvpVelocityBypass = true;
                     this.knockback(0.4000000059604645D, d0, d1, entity1, entity1 == null ? io.papermc.paper.event.entity.EntityKnockbackEvent.Cause.DAMAGE : io.papermc.paper.event.entity.EntityKnockbackEvent.Cause.ENTITY_ATTACK); // CraftBukkit // Paper - knockback events
                     if (!flag) {
                         this.indicateDamage(d0, d1);
@@ -1985,7 +1992,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
     }
 
     public void knockback(double d0, double d1, double d2, @Nullable Entity attacker, io.papermc.paper.event.entity.EntityKnockbackEvent.Cause cause) { // Paper - knockback events
-        d0 *= 1.0D - this.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE);
+        if (!(this instanceof ServerPlayer && attacker instanceof ServerPlayer)) d0 *= 1.0D - this.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE);
         if (true || d0 > 0.0D) { // CraftBukkit - Call event even when force is 0
             //this.hasImpulse = true; // CraftBukkit - Move down
 
@@ -1998,7 +2005,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
             Vec3 vec3d1 = (new Vec3(d1, 0.0D, d2)).normalize().scale(d0);
 
             // Paper start - knockback events
-            Vec3 finalVelocity = new Vec3(vec3d.x / 2.0D - vec3d1.x, this.onGround() ? Math.min(0.4D, vec3d.y / 2.0D + d0) : vec3d.y, vec3d.z / 2.0D - vec3d1.z);
+            Vec3 finalVelocity = new Vec3(vec3d.x / 2.0D - vec3d1.x, Math.min(0.4D, vec3d.y / 2.0D + d0), vec3d.z / 2.0D - vec3d1.z);//this.onGround() ? Math.min(0.4D, vec3d.y / 2.0D + d0) : vec3d.y, vec3d.z / 2.0D - vec3d1.z);
             Vec3 diff = finalVelocity.subtract(vec3d);
             io.papermc.paper.event.entity.EntityKnockbackEvent event = CraftEventFactory.callEntityKnockbackEvent((org.bukkit.craftbukkit.entity.CraftLivingEntity) this.getBukkitEntity(), attacker, cause, d0, diff);
             // Paper end - knockback events
@@ -2222,7 +2229,17 @@ public abstract class LivingEntity extends Entity implements Attackable {
     protected float getDamageAfterArmorAbsorb(DamageSource source, float amount) {
         if (!source.is(DamageTypeTags.BYPASSES_ARMOR)) {
             // this.hurtArmor(damagesource, f); // CraftBukkit - Moved into actuallyHurt(DamageSource, float)
-            amount = CombatRules.getDamageAfterAbsorb(this, amount, source, (float) this.getArmorValue(), (float) this.getAttributeValue(Attributes.ARMOR_TOUGHNESS));
+            if (this instanceof ServerPlayer sp && source.getEntity() instanceof ServerPlayer sp1) {
+                if (!source.isDirect() || netheriteWeapons.contains(sp1.getBukkitEntity().getInventory().getItemInMainHand().getType())) {
+                    int toughnessReducer = 0;
+                    for (org.bukkit.inventory.ItemStack is : sp.getBukkitEntity().getInventory().getArmorContents())
+                        if (is != null && netheriteArmorSet.contains(is.getType()))
+                            toughnessReducer++;
+                    amount = CombatRules.getDamageAfterAbsorb(this, amount, source, (float) this.getArmorValue(), (float) this.getAttributeValue(Attributes.ARMOR_TOUGHNESS) - toughnessReducer);
+                }
+                else amount = CombatRules.getDamageAfterAbsorb(this, amount, source, (float) this.getArmorValue(), (float) this.getAttributeValue(Attributes.ARMOR_TOUGHNESS));
+            }
+            else amount = CombatRules.getDamageAfterAbsorb(this, amount, source, (float) this.getArmorValue(), (float) this.getAttributeValue(Attributes.ARMOR_TOUGHNESS));
         }
 
         return amount;
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
index 0a7aa715674e5577e7f2327f6d0d253e5e6ec234..8d967849f7f3fef2140bc62bf66e19cc5f6b13ce 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -830,7 +830,7 @@ public abstract class AbstractArrow extends Projectile {
     }
 
     protected float getWaterInertia() {
-        return 0.6F;
+        return 0.99F;//0.6F;
     }
 
     public void setNoPhysics(boolean noClip) {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
index 1223c5d23d0ea6aed068bdf0f5725e2ad49fc82c..855da8f2890cf3d3acf8d93fb7f7b985e8db5faf 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
@@ -298,8 +298,8 @@ public class FishingHook extends Projectile {
         if (!this.level().isClientSide) {
             this.setHookedEntity(entityHitResult.getEntity());
         }
-
-    }
+        entityHitResult.getEntity().hurt(this.damageSources().thrown(this, this.getOwner()), 0);
+    } // this being stolen from snowball, which extendes throwableProjectile, might be problematic since this extends Projectile
 
     @Override
     protected void onHitBlock(BlockHitResult blockHitResult) {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
index 8a5baed3d82e49af55f4d58e8729f14c0cd466f2..0bf63b0aa92eccdd8338db9914bac981673e6f9b 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
@@ -13,6 +13,7 @@ import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.server.level.ServerEntity;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.tags.EntityTypeTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.damagesource.DamageSource;
@@ -201,7 +202,10 @@ public abstract class Projectile extends Entity implements TraceableEntity {
         this.shoot((double) f5, (double) f6, (double) f7, speed, divergence);
         Vec3 vec3d = shooter.getKnownMovement();
 
-        if (!shooter.level().paperConfig().misc.disableRelativeProjectileVelocity) this.setDeltaMovement(this.getDeltaMovement().add(vec3d.x, shooter.onGround() ? 0.0D : vec3d.y, vec3d.z)); // Paper - allow disabling relative velocity
+        // if (!shooter.level().paperConfig().misc.disableRelativeProjectileVelocity)
+        if (!(this instanceof ThrownPotion || (this instanceof AbstractArrow aa && !aa.shotFromCrossbow()))) {
+            this.setDeltaMovement(this.getDeltaMovement().add(vec3d.x, shooter.onGround() ? 0.0D : vec3d.y, vec3d.z)); // Paper - allow disabling relative velocity
+        }
     }
 
     // CraftBukkit start - call projectile hit event
diff --git a/src/main/java/net/minecraft/world/food/FoodConstants.java b/src/main/java/net/minecraft/world/food/FoodConstants.java
index 807b07471283edf99b82ebf256e9e601595bf1d1..a1f91e5ac9bc8764fc2bff101af45b766e776002 100644
--- a/src/main/java/net/minecraft/world/food/FoodConstants.java
+++ b/src/main/java/net/minecraft/world/food/FoodConstants.java
@@ -7,7 +7,7 @@ public class FoodConstants {
     public static final float SATURATION_FLOOR = 2.5F;
     public static final float EXHAUSTION_DROP = 4.0F;
     public static final int HEALTH_TICK_COUNT = 80;
-    public static final int HEALTH_TICK_COUNT_SATURATED = 10;
+    public static final int HEALTH_TICK_COUNT_SATURATED = 80;//10;
     public static final int HEAL_LEVEL = 18;
     public static final int SPRINT_LEVEL = 6;
     public static final int STARVE_LEVEL = 0;
@@ -17,15 +17,15 @@ public class FoodConstants {
     public static final float FOOD_SATURATION_GOOD = 0.8F;
     public static final float FOOD_SATURATION_MAX = 1.0F;
     public static final float FOOD_SATURATION_SUPERNATURAL = 1.2F;
-    public static final float EXHAUSTION_HEAL = 6.0F;
-    public static final float EXHAUSTION_JUMP = 0.05F;
-    public static final float EXHAUSTION_SPRINT_JUMP = 0.2F;
-    public static final float EXHAUSTION_MINE = 0.005F;
-    public static final float EXHAUSTION_ATTACK = 0.1F;
-    public static final float EXHAUSTION_WALK = 0.0F;
-    public static final float EXHAUSTION_CROUCH = 0.0F;
+    public static final float EXHAUSTION_HEAL = 4.0F;//6.0F;
+    public static final float EXHAUSTION_JUMP = 0.2F;//0.05F;
+    public static final float EXHAUSTION_SPRINT_JUMP = 0.8F;//0.2F;
+    public static final float EXHAUSTION_MINE = 0.025F;//0.005F;
+    public static final float EXHAUSTION_ATTACK = 0.3F;//0.1F;
+    public static final float EXHAUSTION_WALK = 0.01F;//0.0F;
+    public static final float EXHAUSTION_CROUCH = 0.01F;//0.0F;
     public static final float EXHAUSTION_SPRINT = 0.1F;
-    public static final float EXHAUSTION_SWIM = 0.01F;
+    public static final float EXHAUSTION_SWIM = 0.015F;//0.01F;
 
     public static float saturationByModifier(int nutrition, float saturationModifier) {
         return (float)nutrition * saturationModifier * 2.0F;
diff --git a/src/main/java/net/minecraft/world/food/FoodData.java b/src/main/java/net/minecraft/world/food/FoodData.java
index c7ad716f607afe382436d088a2b2e622e02a0671..b8f3bd14718a2697f7fe50abba7605d09697448c 100644
--- a/src/main/java/net/minecraft/world/food/FoodData.java
+++ b/src/main/java/net/minecraft/world/food/FoodData.java
@@ -18,7 +18,7 @@ public class FoodData {
     private int tickTimer;
     // CraftBukkit start
     private Player entityhuman;
-    public int saturatedRegenRate = 10;
+    public int saturatedRegenRate = 80;//10;
     public int unsaturatedRegenRate = 80;
     public int starvationRate = 80;
     // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/item/ChorusFruitItem.java b/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
index 9f59f63203807abc3802d3e2f060d90d0d754860..b994ce10d2b11751aa9024232808ab205f32ff9e 100644
--- a/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
+++ b/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
@@ -68,7 +68,7 @@ public class ChorusFruitItem extends Item {
                 Player entityhuman = (Player) user;
 
                 entityhuman.resetCurrentImpulseContext();
-                entityhuman.getCooldowns().addCooldown(this, 20);
+                // entityhuman.getCooldowns().addCooldown(this, 20);
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/item/EnderpearlItem.java b/src/main/java/net/minecraft/world/item/EnderpearlItem.java
index 11b04455f09d8bfdf44499bb8359dc715c2daffd..f89609a220d3188ef9c243a9b8c398758901f79e 100644
--- a/src/main/java/net/minecraft/world/item/EnderpearlItem.java
+++ b/src/main/java/net/minecraft/world/item/EnderpearlItem.java
@@ -36,7 +36,7 @@ public class EnderpearlItem extends Item {
 
                 world.playSound((Player) null, user.getX(), user.getY(), user.getZ(), SoundEvents.ENDER_PEARL_THROW, SoundSource.NEUTRAL, 0.5F, 0.4F / (net.minecraft.world.entity.Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
                 user.awardStat(Stats.ITEM_USED.get(this));
-                user.getCooldowns().addCooldown(this, user.getAbilities().instabuild ? world.purpurConfig.enderPearlCooldownCreative : world.purpurConfig.enderPearlCooldown); // Purpur
+                // user.getCooldowns().addCooldown(this, user.getAbilities().instabuild ? world.purpurConfig.enderPearlCooldownCreative : world.purpurConfig.enderPearlCooldown); // Purpur
             } else {
                 // Paper end - PlayerLaunchProjectileEvent
                 if (user instanceof net.minecraft.server.level.ServerPlayer) {
diff --git a/src/main/java/net/minecraft/world/item/TridentItem.java b/src/main/java/net/minecraft/world/item/TridentItem.java
index 8cf0b69fee110af05b89afa8e3236575aa6850e2..14c8e6a2f27005a32d3038952e6ce4cccc7f9cb3 100644
--- a/src/main/java/net/minecraft/world/item/TridentItem.java
+++ b/src/main/java/net/minecraft/world/item/TridentItem.java
@@ -72,7 +72,7 @@ public class TridentItem extends Item implements ProjectileItem {
             if (j >= 10) {
                 float f = EnchantmentHelper.getTridentSpinAttackStrength(stack, entityhuman);
 
-                if (f <= 0.0F || entityhuman.isInWaterOrRain()) {
+                if (f <= 0.0F || true) {//entityhuman.isInWaterOrRain()) {
                     if (!TridentItem.isTooDamagedToUse(stack)) {
                         Holder<SoundEvent> holder = (Holder) EnchantmentHelper.pickHighestLevel(stack, EnchantmentEffectComponents.TRIDENT_SOUND).orElse(SoundEvents.TRIDENT_THROW);
 
@@ -160,7 +160,7 @@ public class TridentItem extends Item implements ProjectileItem {
 
         if (TridentItem.isTooDamagedToUse(itemstack)) {
             return InteractionResultHolder.fail(itemstack);
-        } else if (EnchantmentHelper.getTridentSpinAttackStrength(itemstack, user) > 0.0F && !user.isInWaterOrRain()) {
+        } else if (EnchantmentHelper.getTridentSpinAttackStrength(itemstack, user) > 0.0F && false) {//!user.isInWaterOrRain()) {
             return InteractionResultHolder.fail(itemstack);
         } else {
             user.startUsingItem(hand);
diff --git a/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java b/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java
index 06ff34a333532c569d80919b702728d89e649969..24179f61a7aeeb2541f4e49d78a7dbb91b93a40a 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java
@@ -455,7 +455,7 @@ public class Enchantments {
                     new EnchantmentAttributeEffect(
                         ResourceLocation.withDefaultNamespace("enchantment.soul_speed"),
                         Attributes.MOVEMENT_SPEED,
-                        LevelBasedValue.perLevel(0.0405F, 0.0105F),
+                        LevelBasedValue.perLevel(0.0405F / 3, 0.0105F / 3),
                         AttributeModifier.Operation.ADD_VALUE
                     ),
                     AllOfCondition.allOf(
